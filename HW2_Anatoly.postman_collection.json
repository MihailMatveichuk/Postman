{
	"info": {
		"_postman_id": "aaa10e3a-1302-47bf-97fb-18cf31093d3c",
		"name": "HW2_Anatoly",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18672202"
	},
	"item": [
		{
			"name": "user_info_2.1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  1.\r",
							"// Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
							"// P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
							"\r",
							"// Positive test:\r",
							"if(request.data.name.length >= 3 && request.data.name.length <= 40 && request.data.name[0] !== \" \" && request.data.name.slice(-1) !== \" \" && request.data.name !== \"\" && typeof(+request.data.age == 'number') && +request.data.age >= 18 && +request.data.age <= 120 && Number.isInteger(+request.data.age) && +request.data.age !== \"\" && typeof(+request.data.salary) == 'number' && +request.data.salary >= 1 && +request.data.salary <= 1000000 && Number.isInteger(+request.data.salary) && +request.data.salary !== \"\"){\r",
							"    pm.test(\"Successful POST request\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"    } \r",
							"\r",
							"// Nagative tests: \r",
							"else {\r",
							"    if(!request.data.age.trim()){ \r",
							"        pm.test(\"Field age is required to fill\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"        }   \r",
							"    else if(typeof(+request.data.age) !== 'number'){ \r",
							"        pm.test(\"It is not available type for age\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"        console.log(request.data.age);\r",
							"        }  \r",
							"    else if(!Number.isInteger(+request.data.age)){ \r",
							"        pm.test(\"This is fractional value of age\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    } \r",
							"    else if(+request.data.age < 18){ \r",
							"        pm.test(\"You are younger\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"        }  \r",
							"    else if(+request.data.age > 120){ \r",
							"        pm.test(\"You are older\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"        } \r",
							"    if(!request.data.name.trim()){ \r",
							"        pm.test(\"Field name is required to fill\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        }); \r",
							"     } \r",
							"    else if(request.data.name.length < 3){ \r",
							"        pm.test(\"This name is shoter\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"        }      \r",
							"    else if(request.data.length > 40){ \r",
							"        pm.test(\"This name is longer\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        }); \r",
							"     } \r",
							"    else if(request.data.name[0] == \" \"){ \r",
							"        pm.test(\"It is not available to has space in front of name\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"        }\r",
							"    else if(request.data.name.slice(-1) == \" \"){ \r",
							"        pm.test(\"It is not available to has space in end of name\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"        }  \r",
							"    if(!+request.data.salary.trim()){ \r",
							"        pm.test(\"Field salary is required to fill\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"        }      \r",
							"    else if(typeof(+request.data.salary) !== 'number'){ \r",
							"        pm.test(\"It is not available type for salary\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"        console.log(request.data.salary);\r",
							"        }  \r",
							"    else if(!Number.isInteger(+request.data.salary)){ \r",
							"        pm.test(\"This is fractional value of salary\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"    } \r",
							"    else if(+request.data.salary < 1){ \r",
							"        pm.test(\"You are broke\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"        }  \r",
							"    else if(+request.data.salary > 1000000){ \r",
							"        pm.test(\"This salary is not possible for QA\", function () {\r",
							"            pm.response.to.not.have.status(200);\r",
							"        });\r",
							"        }       \r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005//user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"",
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4.2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2.\r",
							"// * Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let name2 = jsonData.name;\r",
							"let age2 = jsonData.age;\r",
							"let salary2 = jsonData.salary;\r",
							"\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"let req_salary = req_data.salary;\r",
							"let req_name = req_data.name;\r",
							"let req_age = req_data.age;\r",
							"\r",
							"    jsonData.salary.forEach((item, index) => {\r",
							"        pm.test(`Your req_salary ${req_salary * (index + 1)} equal ${item}`, function () {\r",
							"        pm.expect(+(req_salary * (index + 1))).to.eql( +item);\r",
							"}); \r",
							"    })\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3.3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3.\r",
							"//  Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"// first variant\r",
							"const reqObject = pm.request.url.query.toObject()\r",
							"const respObject = {\r",
							"    age: String(pm.response.json().age),\r",
							"    name: pm.response.json().name,\r",
							"    salary: String(pm.response.json().salary)\r",
							"}\r",
							"pm.test(\"Compare request of object and response of object\", function () {\r",
							"    pm.expect(reqObject).to.deep.eql(respObject);\r",
							"});\r",
							"\r",
							"// second variant\r",
							"const jsonData = pm.response.json();\r",
							"const resp = {};\r",
							"for(const key in reqObject){\r",
							"    resp[key] = isNaN(jsonData[key]) ? jsonData[key] : +jsonData[key]\r",
							"    reqObject[key] = isNaN(reqObject[key]) ? reqObject[key] : +reqObject[key]\r",
							"}\r",
							"pm.test(\"2.0 Compare request of object and response of object\", function () {\r",
							"    pm.expect(reqObject).to.deep.eql(resp);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age={{age}}&name={{name}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"",
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2.4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 4.\r",
							"// 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"    const keyWords = [\"person\", \"qa_salary_after_1.5_year\", \"qa_salary_after_12_months\", \"qa_salary_after_3.5_years\", \"qa_salary_after_6_months\", \"start_qa_salary\"]\r",
							"    let jsonData = pm.response.json();\r",
							"    keyWords.forEach(key => {\r",
							"        pm.test(`Check ${key}`, function () {\r",
							"        pm.expect(jsonData).to.have.property(key)\r",
							"});\r",
							"    });\r",
							"// 2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"   //1.\r",
							"    let req = request.data;\r",
							"    let index = [1, 2, 2.7, 3.3, 3.8];\r",
							"    for(key in jsonData){\r",
							"        if(key.includes(\"salary\")){\r",
							"            for(let i = 0; i < index.length; i++){\r",
							"                if(jsonData[key]/index[i] === +req.salary){\r",
							"                     pm.test(`Value of ${key} equal to ${+req.salary * index[i]}`, function () {\r",
							"                         pm.expect(jsonData[key]).to.eql(+req.salary * index[i]);\r",
							"                }); \r",
							"            } \r",
							"        }\r",
							"    }\r",
							"    }  \r",
							"    //2.\r",
							"    const salary = pm.environment.get('salary');\r",
							"    const counters = {\r",
							"        'start_qa_salary': 1,\r",
							"        'qa_salary_after_6_months': 2, \r",
							"        'qa_salary_after_3.5_years': 3.8,\r",
							"        'qa_salary_after_12_months': 2.7,\r",
							"        'qa_salary_after_1.5_year': 3.3,\r",
							"    }\r",
							"    for(let key in counters){\r",
							"        pm.test(`Value of ${key} equal to salary * ${counters[key]}`, function () {\r",
							"                         pm.expect(+pm.response.json()[key]).to.eql(salary * counters[key])\r",
							"    });\r",
							"    }\r",
							"    // 3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.   \r",
							"        counters[\"person\"] = '';\r",
							"\r",
							"    for(const key in counters){\r",
							"        pm.test(`Check ${key}`, function () {\r",
							"        pm.expect(jsonData).to.have.property(key)\r",
							"    });\r",
							"    if (key != 'person'){\r",
							"        pm.test(`Value of ${key} equal to salary * ${counters[key]}`, function () {\r",
							"                         pm.expect(+pm.response.json()[key]).to.eql(salary * counters[key])\r",
							"    });\r",
							"    }\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}