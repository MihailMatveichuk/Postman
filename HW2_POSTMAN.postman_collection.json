{
	"info": {
		"_postman_id": "9528da21-b5c5-4184-944c-085ad8a62a40",
		"name": "HW2_POSTMAN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18672202"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let name2 = jsonData.name;\r",
							"let age2 = jsonData.age;\r",
							"let salary2 = jsonData.salary;\r",
							"let dog = jsonData.family.pets.dog;\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"let req_salary = req_data.salary;\r",
							"let req_name = req_data.name;\r",
							"let req_age = req_data.age;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(`Your name ${req_name}`, function () {\r",
							"    pm.expect(name2).to.eql(req_name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(`Your age ${req_age}`, function () {\r",
							"    pm.expect(age2).to.eql(req_age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(`Your salary ${req_salary}`, function () {\r",
							"    pm.expect(salary2).to.eql(+req_salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(`Dog has a name as ${dog.name}`, function () {\r",
							"    pm.expect(JSON.stringify(dog)).to.include(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(`Dog has a age`, function () {\r",
							"    pm.expect(JSON.stringify(dog)).to.include(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(`Dog's name is ${dog.name}`, function () {\r",
							"    pm.expect(dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(`Dog's age is ${dog.age}`, function () {\r",
							"    pm.expect(+dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age={{age}}&name={{name}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"",
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let name2 = jsonData.name;\r",
							"let age2 = jsonData.age;\r",
							"let salary2 = jsonData.salary;\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"let req_salary = req_data.salary;\r",
							"let req_name = req_data.name;\r",
							"let req_age = req_data.age;\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(`Your name ${req_name}`, function () {\r",
							"    pm.expect(name2).to.eql(req_name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(`Your age ${req_age}`, function () {\r",
							"    pm.expect(+age2).to.eql(+req_age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"pm.test(`Your salary ${req_salary}`, function () {\r",
							"    pm.expect(+salary2).to.eql(+req_salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(salary2);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(salary2[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(salary2[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(salary2[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(`Your salary ${req_salary[0]}`, function () {\r",
							"    pm.expect(+salary2[0]).to.eql(+req_salary[0]);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(`Your salary ${req_salary[1]}`, function () {\r",
							"    pm.expect(+salary2[1]).to.eql(+req_salary[0]*2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(`Your salary ${req_salary[2]}`, function () {\r",
							"    pm.expect(+salary2[2]).to.eql(+req_salary[0]*3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", name2);\r",
							"// 16. Создать в окружении переменную age\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", age2);\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", salary2[0]);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for(let i = 0; i < salary2.length; i++){\r",
							"    console.log(salary2[i]);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005//object_info_4?name=Mikhail&age=31&salary=1500&salary=3000&salary=4500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"",
						"",
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Mikhail"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1500"
						},
						{
							"key": "salary",
							"value": "3000"
						},
						{
							"key": "salary",
							"value": "4500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let name = jsonData.name;\r",
							"let age = jsonData.age;\r",
							"let salary = jsonData.salary;\r",
							"let resp_salary_1_5 = jsonData.family.u_salary_1_5_year;\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(`Your test name ${name}`, function () {\r",
							"    pm.expect(name).to.eql(\"Mikhail\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(`Your age ${age}`, function () {\r",
							"    pm.expect(age).to.eql('31');\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(`Your salary ${salary}`, function () {\r",
							"    pm.expect(salary).to.eql(1500);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"let req = request.data;\r",
							"let req_salary = req.salary;\r",
							"let req_salary_1_5 = req_salary * 4;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(`Your name ${req_name}`, function () {\r",
							"    pm.expect(req_name).to.eql(name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(`Your age ${age}`, function () {\r",
							"    pm.expect(req_age).to.eql(age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(`Your salary ${salary}`, function () {\r",
							"    pm.expect(+req_salary).to.eql(+salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(`Your req_salary_1_5 ${req_salary_1_5}`, function () {\r",
							"    pm.expect(req_salary_1_5).to.eql(resp_salary_1_5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"pm.environment.get(\"salary\");\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"pm.environment.get(\"age\");\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"pm.environment.get(\"name\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"    // 6. Спарсить response body в json.\r",
							"    let jsonData = pm.response.json();\r",
							"    // 7. Спарсить request.\r",
							"    let req = request.data;\r",
							"    // 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"    pm.test(\"JSON response has start_qa_salary\", function () {\r",
							"        pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
							"    });\r",
							"    // 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"    pm.test(\"JSON response has qa_salary_after_6_months\", function () {\r",
							"        pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");\r",
							"    });\r",
							"    // 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"    pm.test(\"JSON response has qa_salary_after_12_months\", function () {\r",
							"        pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");\r",
							"    });\r",
							"    // 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"    pm.test(\"JSON response has qa_salary_after_1.5_year\", function () {\r",
							"        pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\");\r",
							"    });\r",
							"    // 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"    pm.test(\"JSON response has qa_salary_after_3.5_years\", function () {\r",
							"        pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\");\r",
							"    });\r",
							"    // 13. Проверить, что json response имеет параметр person\r",
							"    pm.test(\"JSON response has person\", function () {\r",
							"        pm.expect(pm.response.text()).to.include(\"person\");\r",
							"    });\r",
							"    // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"    pm.test(`Start qa salary equal ${request.data.salary}`, function () {\r",
							"        pm.expect(jsonData.start_qa_salary).to.eql(+request.data.salary);\r",
							"    });\r",
							"    // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"    pm.test(`Qa salary after 6 months equals ${request.data.salary * 2}`, function () {\r",
							"        pm.expect(jsonData.qa_salary_after_6_months).to.eql(+request.data.salary * 2);\r",
							"    });\r",
							"    // 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"    pm.test(`Qa salary after 12 months equals ${request.data.salary * 2.7}`, function () {\r",
							"        pm.expect(jsonData.qa_salary_after_12_months).to.eql(+request.data.salary * 2.7);\r",
							"    });\r",
							"    // 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"    pm.test(`Qa salary after 1.5 year equals ${request.data.salary * 3.3}`, function () {\r",
							"        pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(+request.data.salary * 3.3);\r",
							"    });\r",
							"    // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"    pm.test(`Qa_salary_after_3.5_years equals ${request.data.salary * 3.8}`, function () {\r",
							"        pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(+request.data.salary * 3.8);\r",
							"    });\r",
							"    // 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"    pm.test(`First u_name equals ${request.data.salary}`, function () {\r",
							"        pm.expect(jsonData.person.u_name[1]).to.eql(+request.data.salary);\r",
							"    });\r",
							"    // 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"    pm.test(`U_age equals ${request.data.age}`, function () {\r",
							"        pm.expect(jsonData.person.u_age).to.eql(+request.data.age);\r",
							"    });\r",
							"    // 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"    pm.test(`U salary 5 years equals ${request.data.salary * 4.2}`, function () {\r",
							"        pm.expect(jsonData.person.u_salary_5_years).to.eql(+request.data.salary * 4.2);\r",
							"    });\r",
							"    // 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"    for (key in jsonData.person) {\r",
							"        if(typeof(jsonData.person[key]) === 'object'){\r",
							"            for (let i in jsonData.person[key]){\r",
							"                console.log(`Свойство ${i} имеет значение ${jsonData.person[key][i]}`)\r",
							"            }\r",
							"        } else {\r",
							"            console.log(`Свойство ${key} имеет значение ${jsonData.person[key]}`)\r",
							"        }\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005//user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"",
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}